{"remainingRequest":"/home/runner/work/U1_Derecho_Civil_OyC_B7/U1_Derecho_Civil_OyC_B7/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Derecho_Civil_OyC_B7/U1_Derecho_Civil_OyC_B7/src/views/curso/Tema2.vue?vue&type=template&id=f30e02d6&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Derecho_Civil_OyC_B7/U1_Derecho_Civil_OyC_B7/src/views/curso/Tema2.vue","mtime":1746405387392},{"path":"/home/runner/work/U1_Derecho_Civil_OyC_B7/U1_Derecho_Civil_OyC_B7/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Derecho_Civil_OyC_B7/U1_Derecho_Civil_OyC_B7/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Derecho_Civil_OyC_B7/U1_Derecho_Civil_OyC_B7/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Derecho_Civil_OyC_B7/U1_Derecho_Civil_OyC_B7/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Derecho_Civil_OyC_B7/U1_Derecho_Civil_OyC_B7/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}